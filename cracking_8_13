public ArrayList<Box> createStackR(Box[] boxes, Box bottom) {
  int max_height = 0;
  ArrayList<Box> max_stack = null;
  for(int i = 0; i < boxes.length; i++) {
    if(boxes[i].canBeAbove(bottom)) {
      ArrayList<Box> new_stack = createStackR(boxes, boxes[i]);
      int new_height = stackHeight(new_stack);
      if(new_height > max_height) {
        max_stack = new_stack;
        max_height = new_height;
      }
    }
  }
  if(max_stack == null) {
    max_stack = new ArrayList<Box>();
  }
  if (bottom != null) {
    max_stack.add(0, bottom);
  }
  return max_stack;
}

// solution 2 (Edition6, solution1) 

int createStack(ArrayList<Box> boxes) {
  // sort in decending order by height
  Collections.sort(boxes, new BoxComparator());
  int maxHeight = 0;
  
  for(int i = 0; i < boxes.size(); i++) {
   int height = createStack(boxes, i);
    maxHeight = Math.max(maxHeight, height);
  }
  return;
}

int createStack(ArrayList<Box> boxes, int bottomIndex) {
  Box bottom = boxes.get(bottomIndex);
  int maxHeight = 0;
  for(int i = bottomIndex + 1; i < boxes.size(); i++) {
    if(boxes.get(i).canBeAbove(bottom)) {
      int height = createStack(boxes, i);
      maxHeight = Math.max(height, maxHeight);
    }
  }
  maxHeight += bottom.height;
  return height;
}

class BoxComparator implements Comparator<Box> {
  @Override
  public int compare(Box x, Box y) {
    return y.height - x.height;
  }
}

// solution 2 (Edition6, solution2)
// cache results using memoization
int createStack(ArrayList<Box> boxes) {
  Collections.sort(boxes, new BoxComparator());
  int maxHeight = 0;
  int[] stackMap = new int[boxes.size()];
  for (int i = 0; i < boxes.size(); i++) {
    int height = createStack(boxes, i, stackMap);
    maxHeight = Math.max(maxHeight, height);
  }
  return maxHeight;
}

int createStack(ArrayList<Box> boxes, int bottomIndex, int[] stackMap) {
  if(bottomIndex < boxes.size() && stackMap[bottomIndex] > 0 ) {
    return stackMap[bottomIndex];
  }
  Box bottom = boxes.get(bottomIndex);
  int maxHeight = 0;
  for(int i = bottomIndex + 1; i < boxes.size(); i++) {
    if(boxes.get(i).canBeAbove(bottom)){
      int height = createStack(boxes, i , stackMap);
      maxHeight = Math.max(height, maxHeight);
    }
  }
  maxHeight += bottom.height;
  stackMap[bottomIndex] = maxHeight;
  return maxHeight;
}

//////////
public ArrayList<Box> createStackDP(Box[] boxes, Box bottom, Map<Box, List<Box>> stack_map) {
  if(bottom != null && stack_map.containsKey(bottom)) {
    return stack_map.get(bottom);
  }
  int max_height = 0;
  ArrayList<Box> max_stack = null;
  for(int i =0; i < boxes.length; i++) {
    if(boxes[i].canBeAbove(bottom)) {
      ArrayList<Box> new_stack = createStackDP(boxes, boxes[i], stack_map);
      int new_height = stackHeight(new_stack);
      if(new_height > max_height) {
        max_stack = new_stack;
        max_height = new_height;
      }
    }
  }
  if(max_stack == null) max_stack = new ArrayList<Box>();
  if(bottom != null) max_stack.add(0,bottom);
  stack_map.put(bottom, max_stack);
  
  return (ArrayList<Box>)max_stack.clone();
  
}
