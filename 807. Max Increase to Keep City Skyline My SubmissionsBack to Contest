class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        // view from top - col fixed
        int[] topView = new int[grid[0].length]; 
        for(int j = 0; j < grid[0].length; j++) {
            int max = 0;
            for(int i = 0; i < grid.length; i++) {
                max = max < grid[i][j] ? grid[i][j] : max;
            }
            topView[j] = max;
        }
        // view from left
        int[] sideView = new int[grid.length]; 
        for(int i = 0; i < grid.length; i++) {
            int max = 0;
            for(int j = 0; j < grid[0].length; j++) {
                max = max < grid[i][j] ? grid[i][j] : max;
            }
            sideView[i] = max;
        }   
        int result = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                int value = topView[j] < sideView[i] ? topView[j] : sideView[i];
                result += value - grid[i][j];
            }
        }
        // increase irrelavant value... low -> view <- high
        return result;
    }
}
