class Solution {
    public int romanToInt(String s) {
        
        char[] arr = s.toCharArray();
        int result = 0;
        for(int i = 0; i < arr.length; i++) {
            int val = getNumber(arr[i]);
            if(i == arr.length - 1 || val >= getNumber(arr[i+1])) result += val;
            else result -= val;
        }
        return result;
    }
    private int getNumber(char c) {
        if(c == 'M') return 1000;
        if(c == 'D') return 500;
        if(c == 'C') return 100;
        if(c == 'L') return 50;
        if(c == 'X') return 10;
        if(c == 'V') return 5;
        return 1;
    }
}
/*
class Solution {
    public int romanToInt(String s) {
        HashMap<Character, Integer> roman = new HashMap<>();
        roman.put('I',1);
        roman.put('V',5);
        roman.put('X',10);
        roman.put('L',50);
        roman.put('C',100);
        roman.put('D',500);
        roman.put('M',1000);
        
        // MCMLIV
        int result = 0;
        
        for(int i = 0; i < s.length(); i++) {
            if(i + 1 < s.length() && roman.get(s.charAt(i)) < roman.get(s.charAt(i + 1))) {
                result += roman.get(s.charAt(i + 1));
                result -= roman.get(s.charAt(i));
                i++;
            } else {
                result += roman.get(s.charAt(i));
            }
        }
        return result;
    }
}
*/
