// O(2 ^ (r + c))

class Solution {
	ArrayList<Point> getPath(boolean[][] maze) {
		if(maze == null || maze.length == 0 ) return null;
		ArrayList<Point> path = new ArrayList<Point>();
		if(getPath(maze, maze.length - 1, maze[0].length - 1, path)) {
			return path,
		}
		return null;
	}
	
	boolean getPath(boolean[][] maze, int row, int col, ArrayList<Point> path) {
		// if out of bounds or not available, return
		if(col < 0 || row < 0 || !maze[row][col])
			return false;
		
		boolean isAtOrigin = (row == 0) && (col == 0);
		
		// if there's a path from the start to here, add my location 
		if( isAtOrigin || getPath(maze, row, col - 1, path) || getPath(maze, row - 1, col, path)) {
			Point p = new Point(row, col);
			path.add(p);
			return true;
		}
		return false;
	}
}

// O( r * c ) -> keep failed points in HashSet
class Solution {
	ArrayList<Point> getPath(boolean[][] maze) {
		if(maze == null || maze.length == 0 ) return null;
		ArrayList<Point> path = new ArrayList<Point>();
		HashSet<Point> failedPoints = new HashSet<Point>();
		if(getPath(maze, maze.length - 1, maze[0].length - 1, path, failedPoints)) {
			return path,
		}
		return null;
	}
	
	boolean getPath(boolean[][] maze, int row, int col, ArrayList<Point> path, HashSet<Point> failedPoints) {
		// if out of bounds or not available, return
		if(col < 0 || row < 0 || !maze[row][col])	return false;
		
		Point p = new Point(row, col);
		// If we've already visited this cell, return.
		if(failedPoints.contains(p)) {
			return false;
		}
		
		boolean isAtOrigin = (row == 0) && (col == 0);
		
		// if there's a path from the start to here, add my location 
		if( isAtOrigin || getPath(maze, row, col - 1, path, failedPoints) 
			|| getPath(maze, row - 1, col, path, failedPoints)) {
			Point p = new Point(row, col);
			path.add(p);
			return true;
		}
		
		failedPoints.add(p); // cache result
		return false;
	}
}
